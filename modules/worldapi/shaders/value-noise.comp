#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WIDTH 1024
#define HEIGHT 1024
#define WORKGROUP_SIZE 32
#define M_PI 3.1415926535897932384626433832795
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct Pixel{
  vec4 value;
};

layout(std140, binding = 0) buffer buf
{
   Pixel imageData[];
};

float rand(vec2 pos) {
	return fract(sin(dot(pos ,vec2(12.9898,78.233))) * 43758.5453);
}

void main() {
  
  if(gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT)
    return;

  float x = float(gl_GlobalInvocationID.x) / float(WIDTH);
  float y = float(gl_GlobalInvocationID.y) / float(HEIGHT);

  float f = 16 + 1;

  float xf = x * f;
  float yf = y * f;
  int x0 = int(floor(xf));
  int x1 = int(ceil(xf));
  int y0 = int(floor(yf));
  int y1 = int(ceil(yf));

  float v00 = rand(vec2(x0, y0));
  float v01 = rand(vec2(x0, y1));
  float v10 = rand(vec2(x1, y0));
  float v11 = rand(vec2(x1, y1));

  float iy = 0.5 - 0.5 * cos((yf - y0) * M_PI);
  float ix = 0.5 - 0.5 * cos((xf - x0) * M_PI);

  float l0 = mix(v00, v01, iy);
  float l1 = mix(v10, v11, iy);
  float lf = mix(l0, l1, ix);

  vec4 color = vec4(lf, lf, lf, 1.);

  // store the rendered mandelbrot set into a storage buffer:
  imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].value = color;
}