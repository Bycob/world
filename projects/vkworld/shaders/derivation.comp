#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout(binding = 0) uniform SizeData {
    uint width;
    uint height;
	uint depth;
};

layout(std140, binding = 1) buffer InputBuffers {
	vec4 inputBuffers[][9];
};

layout(std140, binding = 3) buffer OutputBuffer {
    vec4 outputBuffer[];
};

float get(int x, int y) {
	uint normX = x + width;
	uint normY = y + height;

	uint bufX = normX / width;
	uint bufY = normY / height;

	uint dataX = normX % width;
	uint dataY = normY % height;

	uint id = dataX + width * dataY;
	//TODO check indices order
	return inputBuffers[bufX + 3 * bufY][id / 4][id % 4];
}

void set(int x, int y, float val) {
	uint normX = x + width;
	uint normY = y + height;

	uint bufX = normX / width;
	uint bufY = normY / height;

	uint dataX = normX % width;
	uint dataY = normY % height;
	
	uint id = dataX + width * dataY;
	//TODO check indices order
	inputBuffers[bufX + 3 * bufY][id / 4][id % 4] = val;
}

void main() {
	float kernelx[9] = {1,  0, -1,
	                    2,  0, -2,
					    1,  0, -1};
					  
	float kernely[9] = {1,  2,  1,
	                    0,  0,  0,
					   -1, -2, -1};

	int x = int(gl_GlobalInvocationID.x);
	int y = int(gl_GlobalInvocationID.y);
	float ul = get(x - 1, y - 1);
	float ur = get(x + 1, y - 1);
	float dl = get(x - 1, y + 1);
	float dr = get(x + 1, y + 1);

	float sumx = ul - ur + dl - dr;
	sumx += 2 * (get(x - 1, y) - get(x + 1, y));
	float sumy = ul + ur - dl - dr;
	sumy += 2 * (get(x, y - 1) - get(x, y + 1));

	set(x, y, length(vec2(sumx, sumy)));
}