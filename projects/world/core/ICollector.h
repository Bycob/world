#ifndef WORLD_ICOLLECTOR_H
#define WORLD_ICOLLECTOR_H

#include "world/core/WorldConfig.h"

#include <tuple>

#include "WorldKeys.h"
#include "ExplorationContext.h"

namespace world {

class ICollectorChannelBase;
template <typename T> class ICollectorChannel;

/** Interface for a collector. World uses collectors to
 * retrieve data generated by an exploration session.
 * Collectors are compound of different channels, which
 * each can collect one type of asset (mesh, material,
 * texture, shader...). The assets can either be stored
 * in the channel for later use, or used directly (for
 * exemple by a custom channel implemented in a 3D application).
 * The user can implement a channel directly, by inheriting
 * the class ICollectorChannel<T>. */
class ICollector {
public:
    template <typename T> ICollectorChannel<T> &getChannel();

    template <typename T> bool hasChannel() const;

    template <typename T, typename T2, typename... Args>
    bool hasChannel() const;

protected:
    virtual ICollectorChannelBase &getChannelByType(size_t type) = 0;

    virtual bool hasChannelByType(size_t type) const = 0;
};


class ICollectorContext;

/** Non-template base class for the collector channels. See
 * template class ICollectorChannel. */
class ICollectorChannelBase {
public:
    virtual ~ICollectorChannelBase() = default;

    virtual void reset() {}
};


/** A collector channel can handle the objects provided
 * by World during an exploration session. It has to implement
 * several methods used by the library to pass the generated assets
 * to the user, get information about what has already been
 * collected, and so on.
 * @tparam T - type of the assets this channel can collect.
 * An asset must have a copy constructor. */
template <typename T> class ICollectorChannel : public ICollectorChannelBase {
public:
    /** This method is called by World to provide the generated
     * assets to this channel.
     * @param key a key referencing the provided item in the library.
     * #has, #remove and #get use the same key to reference this object.
     * @param item */
    virtual void put(
        const ItemKey &key, const T &item,
        const ExplorationContext &ctx = ExplorationContext::getDefault()) = 0;

    /** Returns true when the channel already has an item
     * associated to the given key.
     * @param key same key as in #put method.
     * @return  */
    virtual bool has(const ItemKey &key,
                     const ExplorationContext &ctx =
                         ExplorationContext::getDefault()) const = 0;

    /** Notices the channel that the item at the given key does
     * not belong to the collected assets anymore and should be
     * removed.
     * @param key same key as in #put. */
    virtual void remove(
        const ItemKey &key,
        const ExplorationContext &ctx = ExplorationContext::getDefault()) = 0;
};


template <typename T> inline ICollectorChannel<T> &ICollector::getChannel() {
    size_t type = typeid(T).hash_code();
    return dynamic_cast<ICollectorChannel<T> &>(getChannelByType(type));
}

template <typename T, typename T2, typename... Args>
inline bool ICollector::hasChannel() const {
    return hasChannel<T>() && hasChannel<T2, Args...>();
}

template <typename T> inline bool ICollector::hasChannel() const {
    size_t type = typeid(T).hash_code();
    return hasChannelByType(type);
}

}; // namespace world

#endif // WORLD_ICOLLECTOR_H
